[project]
name = "datacube-alchemist"
dynamic = ["version"]
description = "Batch process Open Data Cube datasets"
authors = [
    {name = "Open Data Cube", email = "earth.observation@ga.gov.au"},
]
dependencies = [
    "attrs>=18.1",
    "boto3",
    "cattrs",
    "dask",
    "datacube<1.9",
    "distributed",
    "eodatasets3>=0.22.0",
    "fsspec",
    "odc-algo",
    "odc-apps-dc-tools",
    "requests",
    "structlog",
    "xarray",
]
requires-python = ">=3.9"
readme = "README.md"
license = "Apache-2.0"
keywords = ["datacube-alchemist", "opendatacube"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]

[project.urls]
Homepage = "https://github.com/opendatacube/datacube-alchemist"

[project.optional-dependencies]
dev = [
    "moto>=5.0",
    "pytest",
    "pytest-cov",
    "ruff",
]

[project.scripts]
datacube-alchemist = "datacube_alchemist.cli:cli_with_envvar_handling"

[tool.coverage.report]
exclude_also = [
    # From coverage manual (https://coverage.readthedocs.io/en/latest/excluding.html).
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",

    # OUR EXCEPTIONS:
    "except ImportError:",
    "pytest.fail\\(", # Parameter checks in pytest.
    "raise TypeError\\(", # "Impossible" errors.
]

[tool.coverage.run]
branch = true
omit = [
    "datacube_alchemist/_version.py",
    "tests/*",
]

[tool.pytest.ini_options]
addopts = "--cov=datacube_alchemist"
norecursedirs = [".*", "build", "dist", "tmp*"]

[tool.ruff.lint]
select = [
    "A",  # Don't shadow built-ins
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D419", # No empty doc strings
    "DTZ", # flake8-datetimez
    "E",  # pycodestyle errors
    "EXE", # flake8-executable
    "F",  # pyflakes
    "FLY", # flynt
    "I",  # isort
    "ICN",  # Use standard import names
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PERF", # perflint
    "PYI", # flake8-pyi
    "Q", # flake8-quotes
    "RET", # flake8-ret
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T10", # flake8-debugger
    "UP", # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.pycodestyle]
max-line-length = 118

[tool.setuptools.packages.find]
exclude = ["tests"]
include = ["datacube*"]

[build-system]
requires = ["setuptools>=69", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "datacube_alchemist/_version.py"
fallback_version = "0.6.8.dev0"
