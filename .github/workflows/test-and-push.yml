name: Test and Push

on:
  push:
    branches:
      - main
    paths:
      - 'datacube_alchemist/**'
      - 'tests/**'
      - '.github/workflows/test-and-push.yml'
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'requirements.in'
      - 'requirements.txt'
      - 'setup.cfg'
      - 'setup.py'

  pull_request:
    branches:
      - main
    paths:
      - 'datacube_alchemist/**'
      - 'tests/**'
      - '.github/workflows/test-and-push.yml'
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'requirements.in'
      - 'requirements.txt'
      - 'setup.cfg'
      - 'setup.py'

  release:
    types: [created, edited]

env:
  IMAGE_NAME: opendatacube/datacube-alchemist

permissions: {}

# When a PR is updated, cancel the jobs from the previous version. Merges
# do not define head_ref, so use run_id to never cancel those jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    - uses: astral-sh/ruff-action@0c50076f12c38c3d0115b7b519b54a91cb9cf0ad # v3.5.0
      with:
        args: 'format --check --diff'

    - name: Build the docker container
      run: |
        docker compose build

    - name: Bring up the docker container
      run: |
        docker compose up -d --quiet-pull
        sleep 5
        docker compose exec -T alchemist datacube system init

    - name: Run tests
      run: |
        docker compose exec -T alchemist pytest --cov=./datacube_alchemist --cov-report=xml tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@18283e04ce6e62d37312384ff67231eb8fd56d24 # v5.4.3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    - name: Integration tests
      run: |
        docker compose exec -T alchemist bash ./tests/integration_tests.sh

  push:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    needs: test

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0

    # Build and Push for main branch
    # Docker
    - name: Get git commit hash for push to main
      if: github.event_name != 'release'
      run: |
        git fetch --all --tags
        echo "GITHASH=$(git describe --tags)" >> $GITHUB_ENV

    - name: Build and Push unstable Docker Image for push to main
      uses: whoan/docker-build-with-cache-action@d8d3ad518e7ac382b880720d0751815e656fe032 # v8.1.0
      if: github.event_name != 'release'
      with:
        image_name: ${{ env.IMAGE_NAME }}
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}
        image_tag: latest,${{ env.GITHASH }}

    # Build and Push for release
    # Python
    - name: Build the package
      if: github.event_name == 'release'
      run: |
        pip install build
        python -m build

    - name: Deploy packages to DEA Packages
      if: github.event_name == 'release'
      uses: jakejarvis/s3-sync-action@be0c4ab89158cac4278689ebedd8407dd5f35a83 # v0.5.1
      with:
        args: --acl public-read --follow-symlinks
      env:
        AWS_S3_BUCKET: "datacube-core-deployment"
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "ap-southeast-2"  # optional: defaults to us-east-1
        SOURCE_DIR: "dist"  # optional: defaults to entire repository
        DEST_DIR: "datacube-alchemist"

    # Docker
    - name: Get tag for this build if it exists
      if: github.event_name == 'release'
      run: |
        echo "RELEASE=${GITHUB_REF/refs\/tags\/}" >> $GITHUB_ENV

    - name: Build and Push semver tagged Docker Image for Release
      uses: whoan/docker-build-with-cache-action@d8d3ad518e7ac382b880720d0751815e656fe032 # v8.1.0
      if: github.event_name == 'release'
      with:
        image_name: ${{ env.IMAGE_NAME }}
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}
        image_tag: ${{ env.RELEASE }}
